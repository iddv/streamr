name: Deploy StreamrP2P Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'coordinator/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'coordinator/**'
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - prod

env:
  AWS_REGION: eu-west-1
  CDK_DEFAULT_REGION: eu-west-1

# These permissions are needed to interact with GitHub's OIDC Token endpoint
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Debug Environment
        run: |
          echo "üîç Debug Information:"
          echo "Stage: ${{ github.event.inputs.stage || 'beta' }}"
          echo "AWS Region: ${{ env.AWS_REGION }}"
          echo "Beta Account ID: ${{ vars.AWS_ACCOUNT_ID_BETA }}"
          echo "Prod Account ID: ${{ vars.AWS_ACCOUNT_ID_PROD }}"
          echo "GitHub Run ID: ${{ github.run_id }}"
          echo "GitHub Ref: ${{ github.ref }}"

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID_BETA }}:role/streamr-github-actions-role
          role-session-name: streamr-github-actions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
        if: github.event.inputs.stage == 'beta' || github.event.inputs.stage == ''

      - name: Configure AWS credentials for Production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID_PROD }}:role/streamr-github-actions-role
          role-session-name: streamr-github-actions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
        if: github.event.inputs.stage == 'prod'

      - name: Install CDK dependencies
        working-directory: infrastructure
        run: npm ci

      - name: Build CDK app
        working-directory: infrastructure
        run: npm run build

      - name: Run CDK tests
        working-directory: infrastructure
        run: npm test

      - name: Deploy GitHub OIDC Stack
        working-directory: infrastructure
        run: |
          STAGE=${{ github.event.inputs.stage || 'beta' }}
          OIDC_STACK_NAME="streamr-p2p-$STAGE-ireland-github-oidc"
          echo "üîê Deploying GitHub OIDC stack: $OIDC_STACK_NAME"
          npx cdk deploy "$OIDC_STACK_NAME" --require-approval never --context stage=$STAGE

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy Foundation Stack
        working-directory: infrastructure
        run: |
          STAGE=${{ github.event.inputs.stage || 'beta' }}
          FOUNDATION_STACK_NAME="streamr-p2p-$STAGE-ireland-foundation"
          echo "üèóÔ∏è Deploying foundation stack: $FOUNDATION_STACK_NAME"
          npx cdk deploy "$FOUNDATION_STACK_NAME" --require-approval never --context stage=$STAGE

      # NOTE: Database migrations are handled manually using the secure operational bastion approach
      # Run: ./scripts/run-migration-fixed.sh beta
      # This ensures proper security (private subnet access) and reliable execution

      - name: Build and push Docker image
        env:
          STAGE: ${{ github.event.inputs.stage || 'beta' }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Get ECR repository URI from the foundation stack
          FOUNDATION_STACK_NAME="streamr-p2p-$STAGE-ireland-foundation"
          ECR_REPOSITORY_URI=$(aws cloudformation describe-stacks \
            --stack-name "$FOUNDATION_STACK_NAME" \
            --query 'Stacks[0].Outputs[?OutputKey==`ECRRepositoryUri`].OutputValue' \
            --output text)
          
          if [ -z "$ECR_REPOSITORY_URI" ]; then
            echo "::error::ECR Repository URI not found in foundation stack outputs. Cannot proceed."
            exit 1
          fi
          
          echo "üêã Building and pushing Docker image..."
          echo "üì¶ ECR Repository: $ECR_REPOSITORY_URI"
          echo "üè∑Ô∏è Image Tag: $IMAGE_TAG"
          
          # Build the coordinator Docker image with both tags
          cd coordinator
          docker build -t "$ECR_REPOSITORY_URI:$IMAGE_TAG" -t "$ECR_REPOSITORY_URI:latest" .
          
          # Push both tagged and latest images
          docker push "$ECR_REPOSITORY_URI:$IMAGE_TAG"
          docker push "$ECR_REPOSITORY_URI:latest"
          
          echo "‚úÖ Docker image pushed successfully"

      - name: Deploy Application Stack
        working-directory: infrastructure
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          STAGE=${{ github.event.inputs.stage || 'beta' }}
          APPLICATION_STACK_NAME="streamr-p2p-$STAGE-ireland-application"
          echo "üöÄ Deploying application stack: $APPLICATION_STACK_NAME"
          echo "üè∑Ô∏è Using image tag: $IMAGE_TAG"
          npx cdk deploy "$APPLICATION_STACK_NAME" --require-approval never --context stage=$STAGE --context imageTag=$IMAGE_TAG

      - name: Output deployment info
        working-directory: infrastructure
        run: |
          STAGE=${{ github.event.inputs.stage || 'beta' }}
          APPLICATION_STACK_NAME="streamr-p2p-$STAGE-ireland-application"
          echo "üìä Deployment completed for stage: $STAGE"
          
          # Get ALB DNS name
          ALB_DNS=$(aws cloudformation describe-stacks \
            --stack-name "$APPLICATION_STACK_NAME" \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text)
          
          echo "üåê Application Load Balancer: $ALB_DNS"
          echo "üé¨ RTMP Ingest: rtmp://$ALB_DNS:1935/live/"
          echo "üì∫ HLS Playback: http://$ALB_DNS:8085/live/"
          echo "üìä Dashboard: http://$ALB_DNS/dashboard"
          echo "üèÜ Leaderboard: http://$ALB_DNS/leaderboard"
          echo "üí∞ Payouts: http://$ALB_DNS/payouts"

  post-deploy-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python for Integration Tests
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Test Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID_BETA }}:role/streamr-github-actions-role
          role-session-name: streamr-post-deploy-tests-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
        if: github.event.inputs.stage == 'beta' || github.event.inputs.stage == ''

      - name: Configure AWS credentials for Production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID_PROD }}:role/streamr-github-actions-role
          role-session-name: streamr-post-deploy-tests-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
        if: github.event.inputs.stage == 'prod'

      - name: Run sanity tests
        working-directory: infrastructure
        run: |
          STAGE=${{ github.event.inputs.stage || 'beta' }}
          APPLICATION_STACK_NAME="streamr-p2p-$STAGE-ireland-application"
          echo "üß™ Running sanity tests for stage: $STAGE"
          echo "üìã Stack name: $APPLICATION_STACK_NAME"
          
          # Debug: List all stacks to see what exists
          echo "üîç Available CloudFormation stacks:"
          aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query 'StackSummaries[].StackName' --output table
          
          # Get ALB DNS name with debugging
          echo "üîç Getting ALB DNS name from stack outputs..."
          ALB_DNS=$(aws cloudformation describe-stacks \
            --stack-name "$APPLICATION_STACK_NAME" \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          echo "üåê ALB DNS: '$ALB_DNS'"
          
          if [ -z "$ALB_DNS" ] || [ "$ALB_DNS" = "None" ]; then
            echo "‚ùå ALB DNS name not found. Checking all stack outputs:"
            aws cloudformation describe-stacks --stack-name "$APPLICATION_STACK_NAME" --query 'Stacks[0].Outputs' --output table || echo "Stack not found"
            exit 1
          fi
          
          # Test health endpoint
          echo "üîç Testing health endpoint: http://$ALB_DNS/health"
          if curl -f --connect-timeout 30 --max-time 60 "http://$ALB_DNS/health"; then
            echo "‚úÖ Health endpoint responded"
          else
            echo "‚ùå Health endpoint failed"
            echo "üîç Trying to get more info about the ALB..."
            curl -v "http://$ALB_DNS/health" || true
            exit 1
          fi
          
          # Test dashboard endpoint  
          echo "üîç Testing dashboard endpoint: http://$ALB_DNS/dashboard"
          if curl -f --connect-timeout 30 --max-time 60 "http://$ALB_DNS/dashboard"; then
            echo "‚úÖ Dashboard endpoint responded"
          else
            echo "‚ùå Dashboard endpoint failed"
            echo "üîç Trying to get more info about the ALB..."
            curl -v "http://$ALB_DNS/dashboard" || true
            exit 1
          fi
          
          echo "‚úÖ All sanity tests passed!"

      - name: Run Stream Lifecycle Integration Tests
        run: |
          STAGE=${{ github.event.inputs.stage || 'beta' }}
          APPLICATION_STACK_NAME="streamr-p2p-$STAGE-ireland-application"
          
          # Get ALB DNS name for coordinator URL
          ALB_DNS=$(aws cloudformation describe-stacks \
            --stack-name "$APPLICATION_STACK_NAME" \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text)
          
          COORDINATOR_URL="http://$ALB_DNS"
          echo "üß™ Running Integration Tests against deployed coordinator: $COORDINATOR_URL"
          
          # Run parameterized integration tests against the deployed system
          export TEST_TARGET="$COORDINATOR_URL"
          ./scripts/run-integration-tests.sh "$COORDINATOR_URL" smoke
          
          # If smoke tests pass, also run lifecycle tests to validate the Stream Lifecycle System
          if [ $? -eq 0 ]; then
            echo "‚úÖ Smoke tests passed, running lifecycle validation..."
            ./scripts/run-integration-tests.sh "$COORDINATOR_URL" lifecycle
          fi 